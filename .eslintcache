[{"/Users/alexandercheng/Giver-Protocol/src/index.tsx":"1","/Users/alexandercheng/Giver-Protocol/src/reportWebVitals.ts":"2","/Users/alexandercheng/Giver-Protocol/src/App/index.tsx":"3","/Users/alexandercheng/Giver-Protocol/src/App/useReloadOnNetworkChange.ts":"4","/Users/alexandercheng/Giver-Protocol/src/App/useApp.ts":"5","/Users/alexandercheng/Giver-Protocol/src/App/NetworkErrorScreen.tsx":"6","/Users/alexandercheng/Giver-Protocol/src/App/BscExtensionDownModal.tsx":"7","/Users/alexandercheng/Giver-Protocol/src/App/NotSupportNetworkModal.tsx":"8","/Users/alexandercheng/Giver-Protocol/src/App/TerraExtensionDownModal.tsx":"9","/Users/alexandercheng/Giver-Protocol/src/App/SelectEtherBaseWalletModal.tsx":"10","/Users/alexandercheng/Giver-Protocol/src/routes.tsx":"11","/Users/alexandercheng/Giver-Protocol/src/components/layouts/Footer.tsx":"12","/Users/alexandercheng/Giver-Protocol/src/components/layouts/Header.tsx":"13","/Users/alexandercheng/Giver-Protocol/src/store/ContractStore.ts":"14","/Users/alexandercheng/Giver-Protocol/src/store/NetworkStore.ts":"15","/Users/alexandercheng/Giver-Protocol/src/store/SelectWalletStore.ts":"16","/Users/alexandercheng/Giver-Protocol/src/store/SendStore.ts":"17","/Users/alexandercheng/Giver-Protocol/src/services/bscService.ts":"18","/Users/alexandercheng/Giver-Protocol/src/services/walletConnectService.ts":"19","/Users/alexandercheng/Giver-Protocol/src/services/coinBaseService.ts":"20","/Users/alexandercheng/Giver-Protocol/src/services/metaMaskService.ts":"21","/Users/alexandercheng/Giver-Protocol/src/hooks/useAuth.ts":"22","/Users/alexandercheng/Giver-Protocol/src/types/network.ts":"23","/Users/alexandercheng/Giver-Protocol/src/types/wallet.ts":"24","/Users/alexandercheng/Giver-Protocol/src/components/Button.tsx":"25","/Users/alexandercheng/Giver-Protocol/src/components/ExtLink.tsx":"26","/Users/alexandercheng/Giver-Protocol/src/components/Text.tsx":"27","/Users/alexandercheng/Giver-Protocol/src/components/index.ts":"28","/Users/alexandercheng/Giver-Protocol/src/consts/index.ts":"29","/Users/alexandercheng/Giver-Protocol/src/store/AuthStore.ts":"30","/Users/alexandercheng/Giver-Protocol/src/components/Modal/index.tsx":"31","/Users/alexandercheng/Giver-Protocol/src/hooks/useSelectWallet.ts":"32","/Users/alexandercheng/Giver-Protocol/src/components/FormImage.tsx":"33","/Users/alexandercheng/Giver-Protocol/src/consts/util.ts":"34","/Users/alexandercheng/Giver-Protocol/src/consts/wallet.ts":"35","/Users/alexandercheng/Giver-Protocol/src/consts/network.ts":"36","/Users/alexandercheng/Giver-Protocol/src/consts/style.ts":"37","/Users/alexandercheng/Giver-Protocol/src/consts/color.ts":"38","/Users/alexandercheng/Giver-Protocol/src/consts/math.ts":"39","/Users/alexandercheng/Giver-Protocol/src/consts/asset.ts":"40","/Users/alexandercheng/Giver-Protocol/src/components/Row.tsx":"41","/Users/alexandercheng/Giver-Protocol/src/types/asset.ts":"42","/Users/alexandercheng/Giver-Protocol/src/components/Container.tsx":"43","/Users/alexandercheng/Giver-Protocol/src/components/Col.tsx":"44","/Users/alexandercheng/Giver-Protocol/src/services/terraService.ts":"45","/Users/alexandercheng/Giver-Protocol/src/pages/Send/index.tsx":"46","/Users/alexandercheng/Giver-Protocol/src/consts/currency.ts":"47","/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendFormButton.tsx":"48","/Users/alexandercheng/Giver-Protocol/src/pages/Send/FinishButton.tsx":"49","/Users/alexandercheng/Giver-Protocol/src/pages/Send/FormTitle.tsx":"50","/Users/alexandercheng/Giver-Protocol/src/hooks/useSendValidate.ts":"51","/Users/alexandercheng/Giver-Protocol/src/store/SendProcessStore.ts":"52","/Users/alexandercheng/Giver-Protocol/src/pages/Send/Finish/index.tsx":"53","/Users/alexandercheng/Giver-Protocol/src/pages/Send/Confirm/index.tsx":"54","/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/index.tsx":"55","/Users/alexandercheng/Giver-Protocol/src/hooks/useAsset.ts":"56","/Users/alexandercheng/Giver-Protocol/src/hooks/useTerraTxInfo.ts":"57","/Users/alexandercheng/Giver-Protocol/src/hooks/useSend.ts":"58","/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/FormFeeInfo.tsx":"59","/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/AssetList.tsx":"60","/Users/alexandercheng/Giver-Protocol/src/components/FormErrorMessage.tsx":"61","/Users/alexandercheng/Giver-Protocol/src/hooks/useEtherBaseBalance.ts":"62","/Users/alexandercheng/Giver-Protocol/src/hooks/useTerraBalance.ts":"63","/Users/alexandercheng/Giver-Protocol/src/hooks/useShuttle.ts":"64","/Users/alexandercheng/Giver-Protocol/src/hooks/useMantle.ts":"65","/Users/alexandercheng/Giver-Protocol/src/hooks/useEtherBaseContract.ts":"66","/Users/alexandercheng/Giver-Protocol/src/hooks/useNetwork.ts":"67","/Users/alexandercheng/Giver-Protocol/src/components/FormLabelInput.tsx":"68","/Users/alexandercheng/Giver-Protocol/src/components/FormLabel.tsx":"69","/Users/alexandercheng/Giver-Protocol/src/components/FormSelect.tsx":"70","/Users/alexandercheng/Giver-Protocol/src/components/FormInput.tsx":"71"},{"size":1044,"mtime":1620244438583,"results":"72","hashOfConfig":"73"},{"size":422,"mtime":1620244438584,"results":"74","hashOfConfig":"73"},{"size":1443,"mtime":1620244438576,"results":"75","hashOfConfig":"73"},{"size":515,"mtime":1620244438576,"results":"76","hashOfConfig":"73"},{"size":2317,"mtime":1620244438576,"results":"77","hashOfConfig":"73"},{"size":4671,"mtime":1620244438575,"results":"78","hashOfConfig":"73"},{"size":2150,"mtime":1620244438575,"results":"79","hashOfConfig":"73"},{"size":1956,"mtime":1620244438575,"results":"80","hashOfConfig":"73"},{"size":2139,"mtime":1620244438576,"results":"81","hashOfConfig":"73"},{"size":5900,"mtime":1620244438575,"results":"82","hashOfConfig":"73"},{"size":396,"mtime":1620244438585,"results":"83","hashOfConfig":"73"},{"size":2778,"mtime":1620246065044,"results":"84","hashOfConfig":"73"},{"size":4775,"mtime":1620244438577,"results":"85","hashOfConfig":"73"},{"size":2458,"mtime":1620244438585,"results":"86","hashOfConfig":"73"},{"size":1629,"mtime":1620244438585,"results":"87","hashOfConfig":"73"},{"size":283,"mtime":1620244438585,"results":"88","hashOfConfig":"73"},{"size":2412,"mtime":1620244438585,"results":"89","hashOfConfig":"73"},{"size":480,"mtime":1620244438585,"results":"90","hashOfConfig":"73"},{"size":385,"mtime":1620244438585,"results":"91","hashOfConfig":"73"},{"size":534,"mtime":1620244438585,"results":"92","hashOfConfig":"73"},{"size":684,"mtime":1620244438585,"results":"93","hashOfConfig":"73"},{"size":4081,"mtime":1620244438579,"results":"94","hashOfConfig":"73"},{"size":424,"mtime":1620244438585,"results":"95","hashOfConfig":"73"},{"size":180,"mtime":1620244438586,"results":"96","hashOfConfig":"73"},{"size":940,"mtime":1620244438576,"results":"97","hashOfConfig":"73"},{"size":423,"mtime":1620244438576,"results":"98","hashOfConfig":"73"},{"size":341,"mtime":1620244438577,"results":"99","hashOfConfig":"73"},{"size":262,"mtime":1620244438577,"results":"100","hashOfConfig":"73"},{"size":303,"mtime":1620244438577,"results":"101","hashOfConfig":"73"},{"size":824,"mtime":1620244438585,"results":"102","hashOfConfig":"73"},{"size":2022,"mtime":1620244438577,"results":"103","hashOfConfig":"73"},{"size":1359,"mtime":1620244438580,"results":"104","hashOfConfig":"73"},{"size":671,"mtime":1620244438576,"results":"105","hashOfConfig":"73"},{"size":1252,"mtime":1620244438578,"results":"106","hashOfConfig":"73"},{"size":588,"mtime":1620244438578,"results":"107","hashOfConfig":"73"},{"size":2031,"mtime":1620244438578,"results":"108","hashOfConfig":"73"},{"size":607,"mtime":1620244438578,"results":"109","hashOfConfig":"73"},{"size":413,"mtime":1620244438577,"results":"110","hashOfConfig":"73"},{"size":1773,"mtime":1620244438578,"results":"111","hashOfConfig":"73"},{"size":26549,"mtime":1620245940712,"results":"112","hashOfConfig":"73"},{"size":308,"mtime":1620244438577,"results":"113","hashOfConfig":"73"},{"size":1089,"mtime":1620245940713,"results":"114","hashOfConfig":"73"},{"size":308,"mtime":1620244438576,"results":"115","hashOfConfig":"73"},{"size":324,"mtime":1620244438576,"results":"116","hashOfConfig":"73"},{"size":883,"mtime":1620244438585,"results":"117","hashOfConfig":"73"},{"size":4882,"mtime":1620244438584,"results":"118","hashOfConfig":"73"},{"size":1479,"mtime":1620244438577,"results":"119","hashOfConfig":"73"},{"size":4329,"mtime":1620244438584,"results":"120","hashOfConfig":"73"},{"size":623,"mtime":1620244438584,"results":"121","hashOfConfig":"73"},{"size":1588,"mtime":1620244438584,"results":"122","hashOfConfig":"73"},{"size":5383,"mtime":1620244438580,"results":"123","hashOfConfig":"73"},{"size":747,"mtime":1620244438585,"results":"124","hashOfConfig":"73"},{"size":6177,"mtime":1620244438584,"results":"125","hashOfConfig":"73"},{"size":6590,"mtime":1620245774192,"results":"126","hashOfConfig":"73"},{"size":9902,"mtime":1620245020106,"results":"127","hashOfConfig":"73"},{"size":5542,"mtime":1620244438579,"results":"128","hashOfConfig":"73"},{"size":1281,"mtime":1620244438580,"results":"129","hashOfConfig":"73"},{"size":9274,"mtime":1620244438580,"results":"130","hashOfConfig":"73"},{"size":8598,"mtime":1620244888667,"results":"131","hashOfConfig":"73"},{"size":7489,"mtime":1620245940713,"results":"132","hashOfConfig":"73"},{"size":664,"mtime":1620244438576,"results":"133","hashOfConfig":"73"},{"size":1357,"mtime":1620244438579,"results":"134","hashOfConfig":"73"},{"size":2872,"mtime":1620244438580,"results":"135","hashOfConfig":"73"},{"size":4277,"mtime":1620244438580,"results":"136","hashOfConfig":"73"},{"size":787,"mtime":1620244438579,"results":"137","hashOfConfig":"73"},{"size":930,"mtime":1620244438579,"results":"138","hashOfConfig":"73"},{"size":1281,"mtime":1620244438579,"results":"139","hashOfConfig":"73"},{"size":1530,"mtime":1620244438576,"results":"140","hashOfConfig":"73"},{"size":434,"mtime":1620244438576,"results":"141","hashOfConfig":"73"},{"size":3421,"mtime":1620244438577,"results":"142","hashOfConfig":"73"},{"size":657,"mtime":1620244438576,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"g0x2pi",{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"146"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"286"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"/Users/alexandercheng/Giver-Protocol/src/index.tsx",[],["289","290"],"/Users/alexandercheng/Giver-Protocol/src/reportWebVitals.ts",[],"/Users/alexandercheng/Giver-Protocol/src/App/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/App/useReloadOnNetworkChange.ts",[],"/Users/alexandercheng/Giver-Protocol/src/App/useApp.ts",[],"/Users/alexandercheng/Giver-Protocol/src/App/NetworkErrorScreen.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/App/BscExtensionDownModal.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/App/NotSupportNetworkModal.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/App/TerraExtensionDownModal.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/App/SelectEtherBaseWalletModal.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/routes.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/layouts/Footer.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/layouts/Header.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/store/ContractStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/store/NetworkStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/store/SelectWalletStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/store/SendStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/services/bscService.ts",[],"/Users/alexandercheng/Giver-Protocol/src/services/walletConnectService.ts",[],"/Users/alexandercheng/Giver-Protocol/src/services/coinBaseService.ts",[],"/Users/alexandercheng/Giver-Protocol/src/services/metaMaskService.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useAuth.ts",[],"/Users/alexandercheng/Giver-Protocol/src/types/network.ts",[],"/Users/alexandercheng/Giver-Protocol/src/types/wallet.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/Button.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/ExtLink.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/Text.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/index.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/index.ts",[],"/Users/alexandercheng/Giver-Protocol/src/store/AuthStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/Modal/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useSelectWallet.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/FormImage.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/consts/util.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/wallet.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/network.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/style.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/color.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/math.ts",[],"/Users/alexandercheng/Giver-Protocol/src/consts/asset.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/Row.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/types/asset.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/Container.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/Col.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/services/terraService.ts",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/consts/currency.ts",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendFormButton.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/FinishButton.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/FormTitle.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useSendValidate.ts",[],"/Users/alexandercheng/Giver-Protocol/src/store/SendProcessStore.ts",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/Finish/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/Confirm/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/index.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useAsset.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useTerraTxInfo.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useSend.ts",["291"],"import { useEffect } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport bech32 from 'bech32'\nimport axios from 'axios'\nimport {\n  MsgSend,\n // Coins,\n  MsgExecuteContract,\n  StdFee,\n  LCDClient,\n  Coin,\n} from '@terra-money/terra.js'\nimport _ from 'lodash'\nimport BigNumber from 'bignumber.js'\n\nimport { UTIL } from 'consts'\n\nimport terraService from 'services/terraService'\nimport AuthStore from 'store/AuthStore'\nimport NetworkStore from 'store/NetworkStore'\nimport SendStore from 'store/SendStore'\n\nimport { BlockChainType } from 'types/network'\nimport { AssetNativeDenomEnum } from 'types/asset'\nimport { RequestTxResultType, EtherBaseReceiptResultType } from 'types/send'\nimport { WalletEnum } from 'types/wallet'\n\nimport useEtherBaseContract from './useEtherBaseContract'\n\nexport type TerraSendFeeInfo = {\n  gasPrices: Record<string, string>\n  fee: StdFee\n  feeOfGas: BigNumber\n}\n\ntype UseSendType = {\n  initSendData: () => void\n  submitRequestTx: () => Promise<RequestTxResultType>\n  getTerraSendTax: (props: {\n    denom: AssetNativeDenomEnum\n    amount: string\n    feeDenom: string\n  }) => Promise<Coin | undefined>\n  getTerraFeeList: () => Promise<\n    {\n      denom: AssetNativeDenomEnum\n      fee?: StdFee\n    }[]\n  >\n  getTerraMsgs: () => MsgSend[] | MsgExecuteContract[]\n  waitForEtherBaseTransaction: (props: {\n    hash: string\n  }) => Promise<EtherBaseReceiptResultType | undefined>\n}\n\n/* bech32 */\nconst decodeTerraAddressOnEtherBase = (address: string): string => {\n  try {\n    const { words } = bech32.decode(address)\n    const data = bech32.fromWords(words)\n    return '0x' + Buffer.from(data).toString('hex')\n  } catch (error) {\n    return ''\n  }\n}\n\nconst useSend = (): UseSendType => {\n  const loginUser = useRecoilValue(AuthStore.loginUser)\n  const terraExt = useRecoilValue(NetworkStore.terraExt)\n // const terraLocal = useRecoilValue(NetworkStore.terraLocal)\n\n  const [gasPricesFromServer, setGasPricesFromServer] = useRecoilState(\n    SendStore.gasPrices\n  )\n\n  // Send Data\n  const [asset, setAsset] = useRecoilState(SendStore.asset)\n  const [toAddress, setToAddress] = useRecoilState(SendStore.toAddress)\n  const [sendAmount, setSendAmount] = useRecoilState(SendStore.amount)\n  const [memo, setMemo] = useRecoilState(SendStore.memo)\n  const [toBlockChain, setToBlockChain] = useRecoilState(SendStore.toBlockChain)\n  const fromBlockChain = useRecoilValue(SendStore.fromBlockChain)\n  const feeDenom = useRecoilValue<AssetNativeDenomEnum>(SendStore.feeDenom)\n  const [fee, setFee] = useRecoilState(SendStore.fee)\n\n  const { getEtherBaseContract } = useEtherBaseContract()\n\n  const getGasPricesFromServer = async (): Promise<void> => {\n    if (terraExt && terraExt.fcd) {\n      const { data } = await axios.get('/v1/txs/gas_prices', {\n        baseURL: terraExt.fcd,\n      })\n      setGasPricesFromServer(data)\n    }\n  }\n\n  useEffect(() => {\n    getGasPricesFromServer()\n  }, [terraExt])\n\n  const initSendData = (): void => {\n    setAsset(undefined)\n    // setAsset(SendStore.USTWallet.default)\n    setToAddress('')\n    setSendAmount('')\n    setMemo('')\n    setToBlockChain(BlockChainType.terra)\n\n    setFee(undefined)\n  }\n\n  const getTerraSendTax = async (props: {\n    denom: AssetNativeDenomEnum\n    amount: string\n    feeDenom: string\n  }): Promise<Coin | undefined> => {\n    const { denom, amount, feeDenom: _feeDenom } = props\n    if (terraExt) {\n      const lcd = new LCDClient({\n     chainID: terraExt.chainID,\n        URL: terraExt.lcd,\n        gasPrices: { [_feeDenom]: gasPricesFromServer[_feeDenom] },\n      })\n      // tax\n      console.log('CHECK TAX')\n      return UTIL.isNativeTerra(denom)\n        ? lcd.utils.calculateTax(new Coin(denom, amount))\n        : new Coin(_feeDenom, 0)\n    }\n  }\n\n  const getTerraFeeList = async (): Promise<\n    {\n      denom: AssetNativeDenomEnum\n      fee?: StdFee\n    }[]\n  > => {\n    if (terraExt) {\n      const msgs = getTerraMsgs()\n\n      return Promise.all(\n        _.map(AssetNativeDenomEnum, async (denom) => {\n          try {\n            const lcd = new LCDClient({\n              chainID: terraExt.chainID,\n              URL: terraExt.lcd,\n              gasPrices: { [denom]: gasPricesFromServer[denom] },\n            })\n            // fee + tax\n            const unsignedTx = await lcd.tx.create(loginUser.address, {\n              msgs,\n              feeDenoms: [denom],\n            })\n            return {\n              denom,\n              fee: unsignedTx.fee,\n            }\n          } catch {\n            return {\n              denom,\n            }\n          }\n        })\n      )\n    }\n    return []\n  }\n\n  const getTerraMsgs = (): MsgSend[] | MsgExecuteContract[] => {\n    var depositAmount = new Coin('uusd', sendAmount);\n    var donateAmount = Math.round(Number(sendAmount)*0.09166666666);\n    var nonprofitWallet = \"terra1sfwje0xy3qasall5t4pjlcpgtrl4q69cmtnhgt\";\n    return [\n            new MsgExecuteContract(\n              loginUser.address,\n              //mainnet contract: 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'\n              //testnet contract: 'terra15dwd5mj8v59wpj0wvt233mf5efdff808c5tkal'\n              'terra15dwd5mj8v59wpj0wvt233mf5efdff808c5tkal',\n              {deposit_stable: {}},\n              [depositAmount]\n            ),\n            new MsgExecuteContract(\n              loginUser.address,\n              //mainnet contract: 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'\n              //testnet contract: '​terra1ajt556dpzvjwl0kl5tzku3fc3p3knkg9mkv8jl​'\n              'terra1ajt556dpzvjwl0kl5tzku3fc3p3knkg9mkv8jl​',\n              {\"transfer\": {\"recipient\": nonprofitWallet,\"amount\": donateAmount.toString()}})\n           ]\n  /*\n    if (asset) {\n      const recipient =\n        toBlockChain === BlockChainType.terra\n          ? toAddress\n          : terraLocal.shuttle[toBlockChain]\n\n      return UTIL.isNativeDenom(asset.tokenAddress)\n        ? [\n            new MsgSend(loginUser.address, recipient, [\n              new Coin(asset.tokenAddress, sendAmount),\n            ]),\n          ]\n        : [\n            new MsgExecuteContract(\n              loginUser.address,\n              asset.tokenAddress,\n              { transfer: { recipient, amount: sendAmount } },\n              new Coins([])\n            ),\n          ]\n    }\n    */\n    return []\n  }\n\n  const submitRequestTxFromTerra = async (): Promise<RequestTxResultType> => {\n    console.log('help me');\n    const memoOrToAddress =\n      toBlockChain === BlockChainType.terra\n        ? // only terra network can get user's memo\n          memo\n        : // if send to ether-base then memo must be to-address\n          (asset)? asset.name : \"Donate to Charity!\"\n    const msgs = getTerraMsgs()\n    const result = await terraService.post({\n      msgs,\n      memo: memoOrToAddress,\n      gasPrices: { [feeDenom]: gasPricesFromServer[feeDenom] },\n      fee,\n    })\n\n    if (result.success && result.result) {\n      return {\n        success: true,\n        hash: result.result.txhash,\n      }\n    }\n\n    return {\n      success: false,\n      errorMessage:\n        result.error?.code === 1 ? 'Denied by the user' : result.error?.message,\n    }\n  }\n\n  // function for 'submitRequestTxFromEtherBase'\n  const handleTxErrorFromEtherBase = (error: any): RequestTxResultType => {\n    if (loginUser.walletType === WalletEnum.Binance) {\n      return {\n        success: false,\n        errorMessage: _.toString(error.error),\n      }\n    } else if (loginUser.walletType === WalletEnum.MetaMask) {\n      return {\n        success: false,\n        errorMessage: error?.message,\n      }\n    }\n\n    return {\n      success: false,\n      errorMessage: _.toString(error),\n    }\n  }\n\n  // Can't send tx between Ethereum <-> BSC\n  const submitRequestTxFromEtherBase = async (): Promise<RequestTxResultType> => {\n    if (fromBlockChain !== BlockChainType.terra && asset?.tokenAddress) {\n      const contract = getEtherBaseContract({ token: asset.tokenAddress })\n\n      if (contract && loginUser.provider) {\n        const signer = loginUser.provider.getSigner()\n        const withSigner = contract.connect(signer)\n\n        const isTerra = toBlockChain === BlockChainType.terra\n        const decoded = decodeTerraAddressOnEtherBase(toAddress)\n        try {\n          const tx = isTerra\n            ? withSigner.burn(sendAmount, decoded.padEnd(66, '0'))\n            : withSigner.transfer(toAddress, sendAmount)\n\n          const { hash } = await tx\n          return { success: true, hash }\n        } catch (error) {\n          return handleTxErrorFromEtherBase(error)\n        }\n      }\n    }\n\n    return {\n      success: false,\n    }\n  }\n\n  const submitRequestTx = async (): Promise<RequestTxResultType> => {\n    if (fromBlockChain === BlockChainType.terra) {\n      return submitRequestTxFromTerra()\n    }\n\n    return submitRequestTxFromEtherBase()\n  }\n\n  const waitForEtherBaseTransaction = async ({\n    hash,\n  }: {\n    hash: string\n  }): Promise<EtherBaseReceiptResultType | undefined> => {\n    if (fromBlockChain !== BlockChainType.terra && asset?.tokenAddress) {\n      return loginUser.provider?.waitForTransaction(hash)\n    }\n  }\n\n  return {\n    initSendData,\n    submitRequestTx,\n    getTerraSendTax,\n    getTerraFeeList,\n    getTerraMsgs,\n    waitForEtherBaseTransaction,\n  }\n}\n\nexport default useSend\n","/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/FormFeeInfo.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/pages/Send/SendForm/AssetList.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/FormErrorMessage.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useEtherBaseBalance.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useTerraBalance.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useShuttle.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useMantle.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useEtherBaseContract.ts",[],"/Users/alexandercheng/Giver-Protocol/src/hooks/useNetwork.ts",[],"/Users/alexandercheng/Giver-Protocol/src/components/FormLabelInput.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/FormLabel.tsx",[],"/Users/alexandercheng/Giver-Protocol/src/components/FormSelect.tsx",[],["292","293"],"/Users/alexandercheng/Giver-Protocol/src/components/FormInput.tsx",[],{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":212,"column":5,"nodeType":"300","messageId":"301","endLine":212,"endColumn":14},{"ruleId":"294","replacedBy":"302"},{"ruleId":"296","replacedBy":"303"},"no-native-reassign",["304"],"no-negated-in-lhs",["305"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode",["304"],["305"],"no-global-assign","no-unsafe-negation"]